class n extends Error{constructor(t,e,s){super(t),this.status=e,this.response=s,this.name="ApiError"}}class c{baseUrl="/api/v1";async request(t,e={}){const s=`${this.baseUrl}${t}`,a=await fetch(s,{headers:{"Content-Type":"application/json",...e.headers},...e});if(!a.ok){const i=await a.text();throw new n(i||`HTTP ${a.status}: ${a.statusText}`,a.status,a)}const r=await a.text();return r?JSON.parse(r):null}async get(t){return this.request(t,{method:"GET"})}async post(t,e){return this.request(t,{method:"POST",body:e?JSON.stringify(e):void 0})}async put(t,e){return this.request(t,{method:"PUT",body:e?JSON.stringify(e):void 0})}async delete(t){return this.request(t,{method:"DELETE"})}async getGames(){return(await this.get("/games")).games||[]}async getGame(t){return this.get(`/games/${t}`)}async createGame(t){return this.post("/games",t)}async updateGame(t,e){return this.put(`/games/${t}`,e)}async deleteGame(t){return this.delete(`/games/${t}`)}async searchGames(t){return this.post("/games/search",{query:t})}async getRecentlyPlayedGames(){return this.get("/games/recently-played")}async getRecentlyAddedGames(t=5){return this.get(`/games?limit=${t}&sort=created_at&order=desc`)}async getPlatforms(){return this.get("/platforms")}async getPlatform(t){return this.get(`/platforms/${t}`)}async createPlatform(t){return this.post("/platforms",t)}async updatePlatform(t,e){return this.put(`/platforms/${t}`,e)}async deletePlatform(t){return this.delete(`/platforms/${t}`)}async getGameSessions(t){return this.get(`/games/${t}/sessions`)}async createSession(t,e){return this.post(`/games/${t}/sessions`,e)}async updateSession(t,e){return this.put(`/sessions/${t}`,e)}async deleteSession(t){return this.delete(`/sessions/${t}`)}async getActiveSessions(){return this.get("/sessions/active")}async endSession(t){return this.post(`/sessions/${t}/end`,{})}async getWishlist(){return this.get("/wishlist")}async addToWishlist(t){return this.post("/wishlist",t)}async removeFromWishlist(t){return this.delete(`/wishlist/${t}`)}async getShortlist(){return this.get("/shortlist")}async addToShortlist(t){return this.post("/shortlist",t)}async removeFromShortlist(t){return this.delete(`/shortlist/${t}`)}async getStats(){return this.get("/stats")}async scanDirectory(t){return this.post("/scan/directory",t)}async updateMetadataBatch(){return this.post("/scan/metadata-batch",{})}async findDuplicates(){return this.get("/scan/duplicates")}async browseDirectory(t){const e=t?`?path=${encodeURIComponent(t)}`:"";return this.get(`/browse${e}`)}async getSuggestedPaths(){return this.get("/browse/suggestions")}async fetchGameMetadata(t){return this.post(`/games/${t}/fetch-metadata`,{})}async searchMetadata(t){return this.post("/games/search-metadata",{query:t})}async createGameFromMetadata(t){return this.post("/games/from-metadata",t)}async updateCompletionStatus(t,e){return this.put(`/games/${t}/completion`,e)}async getCompletionStats(){return this.get("/games/stats/completion")}async getGamesByCompletionStatus(t){return this.get(`/games/completion/${t}`)}async exportDatabase(){return(await fetch(`${this.baseUrl}/backup/export`)).blob()}async exportGames(){return(await fetch(`${this.baseUrl}/backup/export/games`)).blob()}async importDatabase(t){const e=new FormData;e.append("backup",t);const s=await fetch(`${this.baseUrl}/backup/import`,{method:"POST",body:e});if(!s.ok)throw new n(`HTTP ${s.status}: ${s.statusText}`,s.status,s);return s.json()}async getBackupInfo(){return this.get("/backup/info")}async backupToNextcloud(){return this.post("/backup/nextcloud",{})}async testNextcloudConnection(){return this.get("/backup/nextcloud/test")}async getCacheStats(){return this.get("/cache/stats")}async clearCache(){return this.post("/cache/clear",{})}async getVersion(){return this.get("/version")}async getGenres(){return this.get("/games/genres")}async healthCheck(){return this.get("/health")}}const h=new c;export{n as A,h as a};
