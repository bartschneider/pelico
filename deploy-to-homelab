#!/bin/bash

# Pelico Homelab Deployment Script
# SECURITY: Set these as environment variables!
# export SERVER_HOST="192.168.1.52"
# export SERVER_USER="bartosz" 
# export SERVER_PASSWORD="your_password"

SERVER="${SERVER_HOST:-192.168.1.52}"
USER="${SERVER_USER:-bartosz}"
PASSWORD="${SERVER_PASSWORD}"
PROJECT_DIR="pelico"

if [ -z "$PASSWORD" ]; then
    echo "❌ ERROR: SERVER_PASSWORD environment variable not set!"
    echo "Please run: export SERVER_PASSWORD='your_password'"
    exit 1
fi

echo "🚀 Deploying Pelico to homelab server $SERVER..."

# Function to run commands on remote server
run_remote() {
    sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no "$USER@$SERVER" "$1"
}

# Function to copy files to remote server
copy_to_remote() {
    sshpass -p "$PASSWORD" scp -o StrictHostKeyChecking=no -r "$1" "$USER@$SERVER:$2"
}

# Create project directory on server
echo "📁 Creating project directory..."
run_remote "mkdir -p ~/$PROJECT_DIR"

# Initialize git repo and push code if it doesn't exist, otherwise pull latest
echo "📂 Syncing project code via Git..."

# Check if remote repo exists and has git
GIT_EXISTS=$(run_remote "cd ~/$PROJECT_DIR && [ -d .git ] && echo 'true' || echo 'false'" 2>/dev/null || echo "false")

if [ "$GIT_EXISTS" = "false" ]; then
    echo "Setting up Git repository on server..."
    copy_to_remote . "$PROJECT_DIR/"
    run_remote "cd ~/$PROJECT_DIR && git init && git add . && git config user.email 'deploy@pelico.local' && git config user.name 'Deploy Script' && git commit -m 'Initial deployment'"
else
    echo "Updating existing Git repository..."
    # Create a temporary bundle to transfer the latest changes
    git bundle create /tmp/pelico-deploy.bundle HEAD
    copy_to_remote /tmp/pelico-deploy.bundle "$PROJECT_DIR/deploy.bundle"
    run_remote "cd ~/$PROJECT_DIR && git bundle unbundle deploy.bundle && git reset --hard FETCH_HEAD && rm deploy.bundle"
    rm /tmp/pelico-deploy.bundle
fi

# Verify critical files were synced
echo "🔍 Verifying code sync..."
DOCKER_LOGS_BACKEND=$(run_remote "cd ~/$PROJECT_DIR && grep -c 'GetDockerLogs' internal/handlers/backup_handler.go" 2>/dev/null || echo "0")
VERSION_BACKEND=$(run_remote "cd ~/$PROJECT_DIR && grep -c 'GetVersion' internal/api/server.go" 2>/dev/null || echo "0")
DOCKER_LOGS_FRONTEND=$(run_remote "cd ~/$PROJECT_DIR && grep -c 'showDockerLogs' web/static/js/app.js" 2>/dev/null || echo "0")

if [ "$DOCKER_LOGS_BACKEND" -gt 0 ] && [ "$VERSION_BACKEND" -gt 0 ] && [ "$DOCKER_LOGS_FRONTEND" -gt 0 ]; then
    echo "✅ Code sync verification: PASSED"
else
    echo "❌ Code sync verification: FAILED (Backend: $DOCKER_LOGS_BACKEND, Version: $VERSION_BACKEND, Frontend: $DOCKER_LOGS_FRONTEND)"
    echo "🔄 Falling back to direct file copy..."
    copy_to_remote . "$PROJECT_DIR/"
fi

# Navigate to project directory and build
echo "🔨 Building application on server..."
run_remote "cd ~/$PROJECT_DIR && docker compose down"
run_remote "cd ~/$PROJECT_DIR && docker system prune -f"
run_remote "cd ~/$PROJECT_DIR && docker compose build --no-cache --pull"

# Create .env file on server with local values
echo "⚙️  Setting up environment..."
if [ -f ".env" ]; then
    echo "Using existing .env file with credentials"
    # .env file will be copied as part of project files
else
    echo "Creating .env from example"
    run_remote "cd ~/$PROJECT_DIR && cp .env.example .env"
fi

# Edit .env file for homelab paths (you may need to customize these)
run_remote "cd ~/$PROJECT_DIR && sed -i 's|ROM_PATH_1=.*|ROM_PATH_1=/home/bartosz/roms/nintendo|g' .env"
run_remote "cd ~/$PROJECT_DIR && sed -i 's|ROM_PATH_2=.*|ROM_PATH_2=/home/bartosz/roms/sega|g' .env"

# Start the services
echo "🐳 Starting Docker services..."
run_remote "cd ~/$PROJECT_DIR && docker compose up -d"

# Wait a moment for services to start
echo "⏳ Waiting for services to start..."
sleep 10

# Check status
echo "📊 Checking service status..."
run_remote "cd ~/$PROJECT_DIR && docker compose ps"

# Show logs
echo "📋 Recent logs:"
run_remote "cd ~/$PROJECT_DIR && docker compose logs --tail=20"

echo ""
echo "🔍 Verifying deployment..."

# Wait for services to be fully ready
sleep 5

# Test API endpoints to verify deployment
echo "Testing API endpoints..."
APP_URL="http://$SERVER:8081"

# Test health endpoint
HEALTH_RESPONSE=$(curl -s "$APP_URL/api/v1/health" | grep -o '"status":"healthy"' || echo "")
if [ "$HEALTH_RESPONSE" = '"status":"healthy"' ]; then
    echo "✅ Health check: PASSED"
else
    echo "❌ Health check: FAILED"
fi

# Test version endpoint
VERSION_RESPONSE=$(curl -s "$APP_URL/api/v1/version" | grep -o '"version":"[^"]*"' || echo "")
if [ -n "$VERSION_RESPONSE" ]; then
    echo "✅ Version endpoint: PASSED ($VERSION_RESPONSE)"
else
    echo "❌ Version endpoint: FAILED"
fi

# Test Docker logs endpoint
DOCKER_LOGS_RESPONSE=$(curl -s "$APP_URL/api/v1/docker/logs?lines=1" | grep -o '"container":"[^"]*"' || echo "")
if [ -n "$DOCKER_LOGS_RESPONSE" ]; then
    echo "✅ Docker logs endpoint: PASSED ($DOCKER_LOGS_RESPONSE)"
else
    echo "❌ Docker logs endpoint: FAILED"
fi

# Test frontend assets
FRONTEND_DOCKER_LOGS=$(curl -s "$APP_URL/static/js/app.js" | grep -c "showDockerLogs\|refreshDockerLogs" 2>/dev/null || echo "0")
if [ "$FRONTEND_DOCKER_LOGS" -gt 0 ]; then
    echo "✅ Docker logs frontend: PASSED"
else
    echo "❌ Docker logs frontend: FAILED"
fi

echo ""
echo "✅ Deployment complete!"
echo ""
echo "🌐 Access Pelico at: $APP_URL"
echo "📊 Check status: ssh $USER@$SERVER 'cd $PROJECT_DIR && docker compose ps'"
echo "📋 View logs: ssh $USER@$SERVER 'cd $PROJECT_DIR && docker compose logs -f'"
echo ""
echo "🎮 Your video game collection manager is now running on your homelab!"